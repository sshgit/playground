In this ex: lets assume that London has IndianFood TakeAway, ChineseFood TakeAway and Italian Food TakeAway

Lets say as good will on August 15th(Indian Independence day) all Food TakeAways in London sell Indian Food
i.e Indian Food TakeAway, Italian Food TakeAway and Chinese one.
Does ChineseFoodTakeAway need to create IndianFoodFactory for one day ? think about it

this is where Abstract factory pattern will come into picture, lets modify Food TakeAways to be abstract

Don't get confused with TakeAway and Factory in the example.

So in this case FoodTakeAway (from factory method pattern ) is modified to "have" abstract factory is now called "FoodTakeAwayWithAbstractFactory"

Note that in example ChineseFoodTakeAway which is now ChineseFoodTakeAwayWithAbstractFactory has two constructor
one default constructor which actually by default creates ChineseFoodFactory however if you notice the super class constructor
ChineseFoodTakeAwayWithAbstractFactory can accept any factory . this is where ChineseTakeAway can pass IndianFoodFactory on Independence day :)

This allows further abstracting creating objects, and is promoting "open/close" solid principle.

